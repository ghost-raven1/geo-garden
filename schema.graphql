# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union Morph = About | Cancellation | CancellationAggregator | CancellationConnection | CancellationConnectionCause | CancellationConnectionCreatedAt | CancellationConnectionDate | CancellationConnectionId | CancellationConnectionImage | CancellationConnectionName | CancellationConnectionPublished_at | CancellationConnectionUpdatedAt | CancellationConnection_id | CancellationGroupBy | ComponentAboutAboutItem | ComponentHelpHelpItem | ComponentMapMapItem | Field | FieldAggregator | FieldAggregatorAvg | FieldAggregatorMax | FieldAggregatorMin | FieldAggregatorSum | FieldConnection | FieldConnectionArea | FieldConnectionCreatedAt | FieldConnectionId | FieldConnectionImage | FieldConnectionName | FieldConnectionPublished_at | FieldConnectionStatus | FieldConnectionType | FieldConnectionUpdatedAt | FieldConnection_id | FieldGroupBy | Help | Hotbed | HotbedAggregator | HotbedAggregatorAvg | HotbedAggregatorMax | HotbedAggregatorMin | HotbedAggregatorSum | HotbedConnection | HotbedConnectionCreatedAt | HotbedConnectionHeigth | HotbedConnectionId | HotbedConnectionName | HotbedConnectionNumber | HotbedConnectionPublished_at | HotbedConnectionUpdatedAt | HotbedConnectionWidth | HotbedConnection_id | HotbedGroupBy | Plant | PlantAggregator | PlantAggregatorAvg | PlantAggregatorMax | PlantAggregatorMin | PlantAggregatorSum | PlantConnection | PlantConnectionAmount | PlantConnectionAvailable | PlantConnectionCreatedAt | PlantConnectionId | PlantConnectionImage | PlantConnectionName | PlantConnectionNew | PlantConnectionPrice | PlantConnectionPublished_at | PlantConnectionType | PlantConnectionUpdatedAt | PlantConnection_id | PlantGroupBy | Seedbed | SeedbedAggregator | SeedbedAggregatorAvg | SeedbedAggregatorMax | SeedbedAggregatorMin | SeedbedAggregatorSum | SeedbedConnection | SeedbedConnectionCreatedAt | SeedbedConnectionDescription | SeedbedConnectionField | SeedbedConnectionHeight | SeedbedConnectionId | SeedbedConnectionImage | SeedbedConnectionName | SeedbedConnectionNumber | SeedbedConnectionPublished_at | SeedbedConnectionType | SeedbedConnectionUpdatedAt | SeedbedConnectionWidth | SeedbedConnection_id | SeedbedGroupBy | Tool | ToolAggregator | ToolAggregatorAvg | ToolAggregatorMax | ToolAggregatorMin | ToolAggregatorSum | ToolConnection | ToolConnectionAmount | ToolConnectionCreatedAt | ToolConnectionDescription | ToolConnectionId | ToolConnectionImage | ToolConnectionName | ToolConnectionPublished_at | ToolConnectionType | ToolConnectionUpdatedAt | ToolConnection_id | ToolGroupBy | Tractor | TractorAggregator | TractorAggregatorAvg | TractorAggregatorMax | TractorAggregatorMin | TractorAggregatorSum | TractorConnection | TractorConnectionAmount | TractorConnectionCreatedAt | TractorConnectionDescription | TractorConnectionHorsepowers | TractorConnectionId | TractorConnectionImage | TractorConnectionName | TractorConnectionPublished_at | TractorConnectionUpdatedAt | TractorConnection_id | TractorGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | Winter | WinterAggregator | WinterConnection | WinterConnectionCreatedAt | WinterConnectionDate | WinterConnectionDescription | WinterConnectionId | WinterConnectionPublished_at | WinterConnectionUpdatedAt | WinterConnection_id | WinterGroupBy | createCancellationPayload | createFieldPayload | createHotbedPayload | createPlantPayload | createRolePayload | createSeedbedPayload | createToolPayload | createTractorPayload | createUserPayload | createWinterPayload | deleteAboutPayload | deleteCancellationPayload | deleteFieldPayload | deleteFilePayload | deleteHelpPayload | deleteHotbedPayload | deletePlantPayload | deleteRolePayload | deleteSeedbedPayload | deleteToolPayload | deleteTractorPayload | deleteUserPayload | deleteWinterPayload | updateAboutPayload | updateCancellationPayload | updateFieldPayload | updateHelpPayload | updateHotbedPayload | updatePlantPayload | updateRolePayload | updateSeedbedPayload | updateToolPayload | updateTractorPayload | updateUserPayload | updateWinterPayload

type About {
  About_item: [ComponentAboutAboutItem]
  _id: ID!
  createdAt: DateTime!
  description: String
  id: ID!
  published_at: DateTime
  title: String
  updatedAt: DateTime!
}

type AdminUser {
  firstname: String!
  id: ID!
  lastname: String!
  username: String
}

type Cancellation {
  _id: ID!
  cause: String
  createdAt: DateTime!
  date: DateTime
  id: ID!
  image: UploadFile
  name: String
  plants(limit: Int, sort: String, start: Int, where: JSON): [Plant]
  published_at: DateTime
  updatedAt: DateTime!
}

type CancellationAggregator {
  count: Int
  totalCount: Int
}

type CancellationConnection {
  aggregate: CancellationAggregator
  groupBy: CancellationGroupBy
  values: [Cancellation]
}

type CancellationConnectionCause {
  connection: CancellationConnection
  key: String
}

type CancellationConnectionCreatedAt {
  connection: CancellationConnection
  key: DateTime
}

type CancellationConnectionDate {
  connection: CancellationConnection
  key: DateTime
}

type CancellationConnectionId {
  connection: CancellationConnection
  key: ID
}

type CancellationConnectionImage {
  connection: CancellationConnection
  key: ID
}

type CancellationConnectionName {
  connection: CancellationConnection
  key: String
}

type CancellationConnectionPublished_at {
  connection: CancellationConnection
  key: DateTime
}

type CancellationConnectionUpdatedAt {
  connection: CancellationConnection
  key: DateTime
}

type CancellationConnection_id {
  connection: CancellationConnection
  key: ID
}

type CancellationGroupBy {
  _id: [CancellationConnection_id]
  cause: [CancellationConnectionCause]
  createdAt: [CancellationConnectionCreatedAt]
  date: [CancellationConnectionDate]
  id: [CancellationConnectionId]
  image: [CancellationConnectionImage]
  name: [CancellationConnectionName]
  published_at: [CancellationConnectionPublished_at]
  updatedAt: [CancellationConnectionUpdatedAt]
}

type ComponentAboutAboutItem {
  _id: ID!
  description: String
  id: ID!
  name: String
}

type ComponentHelpHelpItem {
  _id: ID!
  id: ID!
  link: String
  name: String
}

type ComponentMapMapItem {
  _id: ID!
  color: String
  id: ID!
  link: String
  name: String
}

type Field {
  _id: ID!
  area: Float
  createdAt: DateTime!
  id: ID!
  image: UploadFile
  name: String
  published_at: DateTime
  seedbeds(limit: Int, sort: String, start: Int, where: JSON): [Seedbed]
  status: ENUM_FIELD_STATUS
  type: String
  updatedAt: DateTime!
}

type FieldAggregator {
  avg: FieldAggregatorAvg
  count: Int
  max: FieldAggregatorMax
  min: FieldAggregatorMin
  sum: FieldAggregatorSum
  totalCount: Int
}

type FieldAggregatorAvg {
  area: Float
}

type FieldAggregatorMax {
  area: Float
}

type FieldAggregatorMin {
  area: Float
}

type FieldAggregatorSum {
  area: Float
}

type FieldConnection {
  aggregate: FieldAggregator
  groupBy: FieldGroupBy
  values: [Field]
}

type FieldConnectionArea {
  connection: FieldConnection
  key: Float
}

type FieldConnectionCreatedAt {
  connection: FieldConnection
  key: DateTime
}

type FieldConnectionId {
  connection: FieldConnection
  key: ID
}

type FieldConnectionImage {
  connection: FieldConnection
  key: ID
}

type FieldConnectionName {
  connection: FieldConnection
  key: String
}

type FieldConnectionPublished_at {
  connection: FieldConnection
  key: DateTime
}

type FieldConnectionStatus {
  connection: FieldConnection
  key: String
}

type FieldConnectionType {
  connection: FieldConnection
  key: String
}

type FieldConnectionUpdatedAt {
  connection: FieldConnection
  key: DateTime
}

type FieldConnection_id {
  connection: FieldConnection
  key: ID
}

type FieldGroupBy {
  _id: [FieldConnection_id]
  area: [FieldConnectionArea]
  createdAt: [FieldConnectionCreatedAt]
  id: [FieldConnectionId]
  image: [FieldConnectionImage]
  name: [FieldConnectionName]
  published_at: [FieldConnectionPublished_at]
  status: [FieldConnectionStatus]
  type: [FieldConnectionType]
  updatedAt: [FieldConnectionUpdatedAt]
}

type Help {
  _id: ID!
  createdAt: DateTime!
  help_item: [ComponentHelpHelpItem]
  id: ID!
  published_at: DateTime
  title: String
  updatedAt: DateTime!
}

type Hotbed {
  _id: ID!
  createdAt: DateTime!
  heigth: Float
  id: ID!
  name: String
  number: Int
  plants(limit: Int, sort: String, start: Int, where: JSON): [Plant]
  published_at: DateTime
  updatedAt: DateTime!
  width: Float
}

type HotbedAggregator {
  avg: HotbedAggregatorAvg
  count: Int
  max: HotbedAggregatorMax
  min: HotbedAggregatorMin
  sum: HotbedAggregatorSum
  totalCount: Int
}

type HotbedAggregatorAvg {
  heigth: Float
  number: Float
  width: Float
}

type HotbedAggregatorMax {
  heigth: Float
  number: Float
  width: Float
}

type HotbedAggregatorMin {
  heigth: Float
  number: Float
  width: Float
}

type HotbedAggregatorSum {
  heigth: Float
  number: Float
  width: Float
}

type HotbedConnection {
  aggregate: HotbedAggregator
  groupBy: HotbedGroupBy
  values: [Hotbed]
}

type HotbedConnectionCreatedAt {
  connection: HotbedConnection
  key: DateTime
}

type HotbedConnectionHeigth {
  connection: HotbedConnection
  key: Float
}

type HotbedConnectionId {
  connection: HotbedConnection
  key: ID
}

type HotbedConnectionName {
  connection: HotbedConnection
  key: String
}

type HotbedConnectionNumber {
  connection: HotbedConnection
  key: Int
}

type HotbedConnectionPublished_at {
  connection: HotbedConnection
  key: DateTime
}

type HotbedConnectionUpdatedAt {
  connection: HotbedConnection
  key: DateTime
}

type HotbedConnectionWidth {
  connection: HotbedConnection
  key: Float
}

type HotbedConnection_id {
  connection: HotbedConnection
  key: ID
}

type HotbedGroupBy {
  _id: [HotbedConnection_id]
  createdAt: [HotbedConnectionCreatedAt]
  heigth: [HotbedConnectionHeigth]
  id: [HotbedConnectionId]
  name: [HotbedConnectionName]
  number: [HotbedConnectionNumber]
  published_at: [HotbedConnectionPublished_at]
  updatedAt: [HotbedConnectionUpdatedAt]
  width: [HotbedConnectionWidth]
}

type Mutation {
  createCancellation(input: createCancellationInput): createCancellationPayload
  createField(input: createFieldInput): createFieldPayload
  createHotbed(input: createHotbedInput): createHotbedPayload
  createPlant(input: createPlantInput): createPlantPayload
  "Create a new role"
  createRole(input: createRoleInput): createRolePayload
  createSeedbed(input: createSeedbedInput): createSeedbedPayload
  createTool(input: createToolInput): createToolPayload
  createTractor(input: createTractorInput): createTractorPayload
  "Create a new user"
  createUser(input: createUserInput): createUserPayload
  createWinter(input: createWinterInput): createWinterPayload
  deleteAbout: deleteAboutPayload
  deleteCancellation(input: deleteCancellationInput): deleteCancellationPayload
  deleteField(input: deleteFieldInput): deleteFieldPayload
  "Delete one file"
  deleteFile(input: deleteFileInput): deleteFilePayload
  deleteHelp: deleteHelpPayload
  deleteHotbed(input: deleteHotbedInput): deleteHotbedPayload
  deletePlant(input: deletePlantInput): deletePlantPayload
  "Delete an existing role"
  deleteRole(input: deleteRoleInput): deleteRolePayload
  deleteSeedbed(input: deleteSeedbedInput): deleteSeedbedPayload
  deleteTool(input: deleteToolInput): deleteToolPayload
  deleteTractor(input: deleteTractorInput): deleteTractorPayload
  "Delete an existing user"
  deleteUser(input: deleteUserInput): deleteUserPayload
  deleteWinter(input: deleteWinterInput): deleteWinterPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateAbout(input: updateAboutInput): updateAboutPayload
  updateCancellation(input: updateCancellationInput): updateCancellationPayload
  updateField(input: updateFieldInput): updateFieldPayload
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  updateHelp(input: updateHelpInput): updateHelpPayload
  updateHotbed(input: updateHotbedInput): updateHotbedPayload
  updatePlant(input: updatePlantInput): updatePlantPayload
  "Update an existing role"
  updateRole(input: updateRoleInput): updateRolePayload
  updateSeedbed(input: updateSeedbedInput): updateSeedbedPayload
  updateTool(input: updateToolInput): updateToolPayload
  updateTractor(input: updateTractorInput): updateTractorPayload
  "Update an existing user"
  updateUser(input: updateUserInput): updateUserPayload
  updateWinter(input: updateWinterInput): updateWinterPayload
  upload(field: String, file: Upload!, ref: String, refId: ID, source: String): UploadFile!
}

type Plant {
  _id: ID!
  amount: Int
  available: Boolean
  cancellations(limit: Int, sort: String, start: Int, where: JSON): [Cancellation]
  createdAt: DateTime!
  hotbeds(limit: Int, sort: String, start: Int, where: JSON): [Hotbed]
  id: ID!
  image: UploadFile
  name: String
  new: Boolean
  price: Float
  published_at: DateTime
  seedbeds(limit: Int, sort: String, start: Int, where: JSON): [Seedbed]
  type: String
  updatedAt: DateTime!
  winters(limit: Int, sort: String, start: Int, where: JSON): [Winter]
}

type PlantAggregator {
  avg: PlantAggregatorAvg
  count: Int
  max: PlantAggregatorMax
  min: PlantAggregatorMin
  sum: PlantAggregatorSum
  totalCount: Int
}

type PlantAggregatorAvg {
  amount: Float
  price: Float
}

type PlantAggregatorMax {
  amount: Float
  price: Float
}

type PlantAggregatorMin {
  amount: Float
  price: Float
}

type PlantAggregatorSum {
  amount: Float
  price: Float
}

type PlantConnection {
  aggregate: PlantAggregator
  groupBy: PlantGroupBy
  values: [Plant]
}

type PlantConnectionAmount {
  connection: PlantConnection
  key: Int
}

type PlantConnectionAvailable {
  connection: PlantConnection
  key: Boolean
}

type PlantConnectionCreatedAt {
  connection: PlantConnection
  key: DateTime
}

type PlantConnectionId {
  connection: PlantConnection
  key: ID
}

type PlantConnectionImage {
  connection: PlantConnection
  key: ID
}

type PlantConnectionName {
  connection: PlantConnection
  key: String
}

type PlantConnectionNew {
  connection: PlantConnection
  key: Boolean
}

type PlantConnectionPrice {
  connection: PlantConnection
  key: Float
}

type PlantConnectionPublished_at {
  connection: PlantConnection
  key: DateTime
}

type PlantConnectionType {
  connection: PlantConnection
  key: String
}

type PlantConnectionUpdatedAt {
  connection: PlantConnection
  key: DateTime
}

type PlantConnection_id {
  connection: PlantConnection
  key: ID
}

type PlantGroupBy {
  _id: [PlantConnection_id]
  amount: [PlantConnectionAmount]
  available: [PlantConnectionAvailable]
  createdAt: [PlantConnectionCreatedAt]
  id: [PlantConnectionId]
  image: [PlantConnectionImage]
  name: [PlantConnectionName]
  new: [PlantConnectionNew]
  price: [PlantConnectionPrice]
  published_at: [PlantConnectionPublished_at]
  type: [PlantConnectionType]
  updatedAt: [PlantConnectionUpdatedAt]
}

type Query {
  about(publicationState: PublicationState): About
  cancellation(id: ID!, publicationState: PublicationState): Cancellation
  cancellations(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Cancellation]
  cancellationsConnection(limit: Int, sort: String, start: Int, where: JSON): CancellationConnection
  field(id: ID!, publicationState: PublicationState): Field
  fields(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Field]
  fieldsConnection(limit: Int, sort: String, start: Int, where: JSON): FieldConnection
  files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
  filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
  help(publicationState: PublicationState): Help
  hotbed(id: ID!, publicationState: PublicationState): Hotbed
  hotbeds(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Hotbed]
  hotbedsConnection(limit: Int, sort: String, start: Int, where: JSON): HotbedConnection
  me: UsersPermissionsMe
  plant(id: ID!, publicationState: PublicationState): Plant
  plants(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Plant]
  plantsConnection(limit: Int, sort: String, start: Int, where: JSON): PlantConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  "Retrieve all the existing roles. You can't apply filters on this query."
  roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
  seedbed(id: ID!, publicationState: PublicationState): Seedbed
  seedbeds(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Seedbed]
  seedbedsConnection(limit: Int, sort: String, start: Int, where: JSON): SeedbedConnection
  tool(id: ID!, publicationState: PublicationState): Tool
  tools(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Tool]
  toolsConnection(limit: Int, sort: String, start: Int, where: JSON): ToolConnection
  tractor(id: ID!, publicationState: PublicationState): Tractor
  tractors(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Tractor]
  tractorsConnection(limit: Int, sort: String, start: Int, where: JSON): TractorConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
  winter(id: ID!, publicationState: PublicationState): Winter
  winters(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Winter]
  wintersConnection(limit: Int, sort: String, start: Int, where: JSON): WinterConnection
}

type Seedbed {
  _id: ID!
  createdAt: DateTime!
  description: String
  field: Field
  height: Float
  id: ID!
  image: UploadFile
  name: String
  number: Int
  plants(limit: Int, sort: String, start: Int, where: JSON): [Plant]
  published_at: DateTime
  type: String
  updatedAt: DateTime!
  width: Float
}

type SeedbedAggregator {
  avg: SeedbedAggregatorAvg
  count: Int
  max: SeedbedAggregatorMax
  min: SeedbedAggregatorMin
  sum: SeedbedAggregatorSum
  totalCount: Int
}

type SeedbedAggregatorAvg {
  height: Float
  number: Float
  width: Float
}

type SeedbedAggregatorMax {
  height: Float
  number: Float
  width: Float
}

type SeedbedAggregatorMin {
  height: Float
  number: Float
  width: Float
}

type SeedbedAggregatorSum {
  height: Float
  number: Float
  width: Float
}

type SeedbedConnection {
  aggregate: SeedbedAggregator
  groupBy: SeedbedGroupBy
  values: [Seedbed]
}

type SeedbedConnectionCreatedAt {
  connection: SeedbedConnection
  key: DateTime
}

type SeedbedConnectionDescription {
  connection: SeedbedConnection
  key: String
}

type SeedbedConnectionField {
  connection: SeedbedConnection
  key: ID
}

type SeedbedConnectionHeight {
  connection: SeedbedConnection
  key: Float
}

type SeedbedConnectionId {
  connection: SeedbedConnection
  key: ID
}

type SeedbedConnectionImage {
  connection: SeedbedConnection
  key: ID
}

type SeedbedConnectionName {
  connection: SeedbedConnection
  key: String
}

type SeedbedConnectionNumber {
  connection: SeedbedConnection
  key: Int
}

type SeedbedConnectionPublished_at {
  connection: SeedbedConnection
  key: DateTime
}

type SeedbedConnectionType {
  connection: SeedbedConnection
  key: String
}

type SeedbedConnectionUpdatedAt {
  connection: SeedbedConnection
  key: DateTime
}

type SeedbedConnectionWidth {
  connection: SeedbedConnection
  key: Float
}

type SeedbedConnection_id {
  connection: SeedbedConnection
  key: ID
}

type SeedbedGroupBy {
  _id: [SeedbedConnection_id]
  createdAt: [SeedbedConnectionCreatedAt]
  description: [SeedbedConnectionDescription]
  field: [SeedbedConnectionField]
  height: [SeedbedConnectionHeight]
  id: [SeedbedConnectionId]
  image: [SeedbedConnectionImage]
  name: [SeedbedConnectionName]
  number: [SeedbedConnectionNumber]
  published_at: [SeedbedConnectionPublished_at]
  type: [SeedbedConnectionType]
  updatedAt: [SeedbedConnectionUpdatedAt]
  width: [SeedbedConnectionWidth]
}

type Tool {
  _id: ID!
  amount: Int
  createdAt: DateTime!
  description: String
  id: ID!
  image: UploadFile
  name: String
  published_at: DateTime
  type: String
  updatedAt: DateTime!
}

type ToolAggregator {
  avg: ToolAggregatorAvg
  count: Int
  max: ToolAggregatorMax
  min: ToolAggregatorMin
  sum: ToolAggregatorSum
  totalCount: Int
}

type ToolAggregatorAvg {
  amount: Float
}

type ToolAggregatorMax {
  amount: Float
}

type ToolAggregatorMin {
  amount: Float
}

type ToolAggregatorSum {
  amount: Float
}

type ToolConnection {
  aggregate: ToolAggregator
  groupBy: ToolGroupBy
  values: [Tool]
}

type ToolConnectionAmount {
  connection: ToolConnection
  key: Int
}

type ToolConnectionCreatedAt {
  connection: ToolConnection
  key: DateTime
}

type ToolConnectionDescription {
  connection: ToolConnection
  key: String
}

type ToolConnectionId {
  connection: ToolConnection
  key: ID
}

type ToolConnectionImage {
  connection: ToolConnection
  key: ID
}

type ToolConnectionName {
  connection: ToolConnection
  key: String
}

type ToolConnectionPublished_at {
  connection: ToolConnection
  key: DateTime
}

type ToolConnectionType {
  connection: ToolConnection
  key: String
}

type ToolConnectionUpdatedAt {
  connection: ToolConnection
  key: DateTime
}

type ToolConnection_id {
  connection: ToolConnection
  key: ID
}

type ToolGroupBy {
  _id: [ToolConnection_id]
  amount: [ToolConnectionAmount]
  createdAt: [ToolConnectionCreatedAt]
  description: [ToolConnectionDescription]
  id: [ToolConnectionId]
  image: [ToolConnectionImage]
  name: [ToolConnectionName]
  published_at: [ToolConnectionPublished_at]
  type: [ToolConnectionType]
  updatedAt: [ToolConnectionUpdatedAt]
}

type Tractor {
  _id: ID!
  amount: Int
  createdAt: DateTime!
  description: String
  horsepowers: Int
  id: ID!
  image: UploadFile
  name: String
  published_at: DateTime
  updatedAt: DateTime!
}

type TractorAggregator {
  avg: TractorAggregatorAvg
  count: Int
  max: TractorAggregatorMax
  min: TractorAggregatorMin
  sum: TractorAggregatorSum
  totalCount: Int
}

type TractorAggregatorAvg {
  amount: Float
  horsepowers: Float
}

type TractorAggregatorMax {
  amount: Float
  horsepowers: Float
}

type TractorAggregatorMin {
  amount: Float
  horsepowers: Float
}

type TractorAggregatorSum {
  amount: Float
  horsepowers: Float
}

type TractorConnection {
  aggregate: TractorAggregator
  groupBy: TractorGroupBy
  values: [Tractor]
}

type TractorConnectionAmount {
  connection: TractorConnection
  key: Int
}

type TractorConnectionCreatedAt {
  connection: TractorConnection
  key: DateTime
}

type TractorConnectionDescription {
  connection: TractorConnection
  key: String
}

type TractorConnectionHorsepowers {
  connection: TractorConnection
  key: Int
}

type TractorConnectionId {
  connection: TractorConnection
  key: ID
}

type TractorConnectionImage {
  connection: TractorConnection
  key: ID
}

type TractorConnectionName {
  connection: TractorConnection
  key: String
}

type TractorConnectionPublished_at {
  connection: TractorConnection
  key: DateTime
}

type TractorConnectionUpdatedAt {
  connection: TractorConnection
  key: DateTime
}

type TractorConnection_id {
  connection: TractorConnection
  key: ID
}

type TractorGroupBy {
  _id: [TractorConnection_id]
  amount: [TractorConnectionAmount]
  createdAt: [TractorConnectionCreatedAt]
  description: [TractorConnectionDescription]
  horsepowers: [TractorConnectionHorsepowers]
  id: [TractorConnectionId]
  image: [TractorConnectionImage]
  name: [TractorConnectionName]
  published_at: [TractorConnectionPublished_at]
  updatedAt: [TractorConnectionUpdatedAt]
}

type UploadFile {
  _id: ID!
  alternativeText: String
  caption: String
  createdAt: DateTime!
  ext: String
  formats: JSON
  hash: String!
  height: Int
  id: ID!
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
  size: Float!
  updatedAt: DateTime!
  url: String!
  width: Int
}

type UploadFileAggregator {
  avg: UploadFileAggregatorAvg
  count: Int
  max: UploadFileAggregatorMax
  min: UploadFileAggregatorMin
  sum: UploadFileAggregatorSum
  totalCount: Int
}

type UploadFileAggregatorAvg {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMax {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMin {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorSum {
  height: Float
  size: Float
  width: Float
}

type UploadFileConnection {
  aggregate: UploadFileAggregator
  groupBy: UploadFileGroupBy
  values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCaption {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCreatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionExt {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionFormats {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionHash {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionHeight {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnectionId {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionMime {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionName {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionPreviewUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider_metadata {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionSize {
  connection: UploadFileConnection
  key: Float
}

type UploadFileConnectionUpdatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionWidth {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnection_id {
  connection: UploadFileConnection
  key: ID
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  createdAt: [UploadFileConnectionCreatedAt]
  ext: [UploadFileConnectionExt]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  height: [UploadFileConnectionHeight]
  id: [UploadFileConnectionId]
  mime: [UploadFileConnectionMime]
  name: [UploadFileConnectionName]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  size: [UploadFileConnectionSize]
  updatedAt: [UploadFileConnectionUpdatedAt]
  url: [UploadFileConnectionUrl]
  width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String!
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  action: String!
  controller: String!
  enabled: Boolean!
  id: ID!
  policy: String
  role: UsersPermissionsRole
  type: String!
}

type UsersPermissionsRole {
  _id: ID!
  description: String
  id: ID!
  name: String!
  permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
  type: String
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  aggregate: UsersPermissionsRoleAggregator
  groupBy: UsersPermissionsRoleGroupBy
  values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionId {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnectionName {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionType {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnection_id {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  description: [UsersPermissionsRoleConnectionDescription]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime!
  email: String!
  id: ID!
  provider: String
  role: UsersPermissionsRole
  updatedAt: DateTime!
  username: String!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  aggregate: UsersPermissionsUserAggregator
  groupBy: UsersPermissionsUserGroupBy
  values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionEmail {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionId {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionProvider {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionRole {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionUsername {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnection_id {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  blocked: [UsersPermissionsUserConnectionBlocked]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  email: [UsersPermissionsUserConnectionEmail]
  id: [UsersPermissionsUserConnectionId]
  provider: [UsersPermissionsUserConnectionProvider]
  role: [UsersPermissionsUserConnectionRole]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
}

type Winter {
  _id: ID!
  createdAt: DateTime!
  date: DateTime
  description: String
  id: ID!
  plants(limit: Int, sort: String, start: Int, where: JSON): [Plant]
  published_at: DateTime
  updatedAt: DateTime!
}

type WinterAggregator {
  count: Int
  totalCount: Int
}

type WinterConnection {
  aggregate: WinterAggregator
  groupBy: WinterGroupBy
  values: [Winter]
}

type WinterConnectionCreatedAt {
  connection: WinterConnection
  key: DateTime
}

type WinterConnectionDate {
  connection: WinterConnection
  key: DateTime
}

type WinterConnectionDescription {
  connection: WinterConnection
  key: String
}

type WinterConnectionId {
  connection: WinterConnection
  key: ID
}

type WinterConnectionPublished_at {
  connection: WinterConnection
  key: DateTime
}

type WinterConnectionUpdatedAt {
  connection: WinterConnection
  key: DateTime
}

type WinterConnection_id {
  connection: WinterConnection
  key: ID
}

type WinterGroupBy {
  _id: [WinterConnection_id]
  createdAt: [WinterConnectionCreatedAt]
  date: [WinterConnectionDate]
  description: [WinterConnectionDescription]
  id: [WinterConnectionId]
  published_at: [WinterConnectionPublished_at]
  updatedAt: [WinterConnectionUpdatedAt]
}

type createCancellationPayload {
  cancellation: Cancellation
}

type createFieldPayload {
  field: Field
}

type createHotbedPayload {
  hotbed: Hotbed
}

type createPlantPayload {
  plant: Plant
}

type createRolePayload {
  role: UsersPermissionsRole
}

type createSeedbedPayload {
  seedbed: Seedbed
}

type createToolPayload {
  tool: Tool
}

type createTractorPayload {
  tractor: Tractor
}

type createUserPayload {
  user: UsersPermissionsUser
}

type createWinterPayload {
  winter: Winter
}

type deleteAboutPayload {
  about: About
}

type deleteCancellationPayload {
  cancellation: Cancellation
}

type deleteFieldPayload {
  field: Field
}

type deleteFilePayload {
  file: UploadFile
}

type deleteHelpPayload {
  help: Help
}

type deleteHotbedPayload {
  hotbed: Hotbed
}

type deletePlantPayload {
  plant: Plant
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteSeedbedPayload {
  seedbed: Seedbed
}

type deleteToolPayload {
  tool: Tool
}

type deleteTractorPayload {
  tractor: Tractor
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type deleteWinterPayload {
  winter: Winter
}

type updateAboutPayload {
  about: About
}

type updateCancellationPayload {
  cancellation: Cancellation
}

type updateFieldPayload {
  field: Field
}

type updateHelpPayload {
  help: Help
}

type updateHotbedPayload {
  hotbed: Hotbed
}

type updatePlantPayload {
  plant: Plant
}

type updateRolePayload {
  role: UsersPermissionsRole
}

type updateSeedbedPayload {
  seedbed: Seedbed
}

type updateToolPayload {
  tool: Tool
}

type updateTractorPayload {
  tractor: Tractor
}

type updateUserPayload {
  user: UsersPermissionsUser
}

type updateWinterPayload {
  winter: Winter
}

enum ENUM_FIELD_STATUS {
  cleanup
  landing
  preparation
  weeding
  wintering
}

enum PublicationState {
  LIVE
  PREVIEW
}

input AboutInput {
  About_item: [ComponentAboutAboutItemInput]
  created_by: ID
  description: String
  published_at: DateTime
  title: String
  updated_by: ID
}

input CancellationInput {
  cause: String
  created_by: ID
  date: DateTime
  image: ID
  name: String
  plants: [ID]
  published_at: DateTime
  updated_by: ID
}

input ComponentAboutAboutItemInput {
  description: String
  name: String
}

input ComponentHelpHelpItemInput {
  link: String
  name: String
}

input ComponentMapMapItemInput {
  color: String
  link: String
  name: String
}

input FieldInput {
  area: Float
  created_by: ID
  image: ID
  name: String
  published_at: DateTime
  seedbeds: [ID]
  status: ENUM_FIELD_STATUS
  type: String
  updated_by: ID
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  size: Float!
  updated_by: ID
  url: String!
  width: Int
}

input HelpInput {
  created_by: ID
  help_item: [ComponentHelpHelpItemInput]
  published_at: DateTime
  title: String
  updated_by: ID
}

input HotbedInput {
  created_by: ID
  heigth: Float
  name: String
  number: Int
  plants: [ID]
  published_at: DateTime
  updated_by: ID
  width: Float
}

input InputID {
  id: ID!
}

input PlantInput {
  amount: Int
  available: Boolean
  cancellations: [ID]
  created_by: ID
  hotbeds: [ID]
  image: ID
  name: String
  new: Boolean
  price: Float
  published_at: DateTime
  seedbeds: [ID]
  type: String
  updated_by: ID
  winters: [ID]
}

input RoleInput {
  created_by: ID
  description: String
  name: String!
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input SeedbedInput {
  created_by: ID
  description: String
  field: ID
  height: Float
  image: ID
  name: String
  number: Int
  plants: [ID]
  published_at: DateTime
  type: String
  updated_by: ID
  width: Float
}

input ToolInput {
  amount: Int
  created_by: ID
  description: String
  image: ID
  name: String
  published_at: DateTime
  type: String
  updated_by: ID
}

input TractorInput {
  amount: Int
  created_by: ID
  description: String
  horsepowers: Int
  image: ID
  name: String
  published_at: DateTime
  updated_by: ID
}

input UserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String!
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

input WinterInput {
  created_by: ID
  date: DateTime
  description: String
  plants: [ID]
  published_at: DateTime
  updated_by: ID
}

input createCancellationInput {
  data: CancellationInput
}

input createFieldInput {
  data: FieldInput
}

input createHotbedInput {
  data: HotbedInput
}

input createPlantInput {
  data: PlantInput
}

input createRoleInput {
  data: RoleInput
}

input createSeedbedInput {
  data: SeedbedInput
}

input createToolInput {
  data: ToolInput
}

input createTractorInput {
  data: TractorInput
}

input createUserInput {
  data: UserInput
}

input createWinterInput {
  data: WinterInput
}

input deleteCancellationInput {
  where: InputID
}

input deleteFieldInput {
  where: InputID
}

input deleteFileInput {
  where: InputID
}

input deleteHotbedInput {
  where: InputID
}

input deletePlantInput {
  where: InputID
}

input deleteRoleInput {
  where: InputID
}

input deleteSeedbedInput {
  where: InputID
}

input deleteToolInput {
  where: InputID
}

input deleteTractorInput {
  where: InputID
}

input deleteUserInput {
  where: InputID
}

input deleteWinterInput {
  where: InputID
}

input editAboutInput {
  About_item: [editComponentAboutAboutItemInput]
  created_by: ID
  description: String
  published_at: DateTime
  title: String
  updated_by: ID
}

input editCancellationInput {
  cause: String
  created_by: ID
  date: DateTime
  image: ID
  name: String
  plants: [ID]
  published_at: DateTime
  updated_by: ID
}

input editComponentAboutAboutItemInput {
  description: String
  id: ID
  name: String
}

input editComponentHelpHelpItemInput {
  id: ID
  link: String
  name: String
}

input editComponentMapMapItemInput {
  color: String
  id: ID
  link: String
  name: String
}

input editFieldInput {
  area: Float
  created_by: ID
  image: ID
  name: String
  published_at: DateTime
  seedbeds: [ID]
  status: ENUM_FIELD_STATUS
  type: String
  updated_by: ID
}

input editFileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  size: Float
  updated_by: ID
  url: String
  width: Int
}

input editHelpInput {
  created_by: ID
  help_item: [editComponentHelpHelpItemInput]
  published_at: DateTime
  title: String
  updated_by: ID
}

input editHotbedInput {
  created_by: ID
  heigth: Float
  name: String
  number: Int
  plants: [ID]
  published_at: DateTime
  updated_by: ID
  width: Float
}

input editPlantInput {
  amount: Int
  available: Boolean
  cancellations: [ID]
  created_by: ID
  hotbeds: [ID]
  image: ID
  name: String
  new: Boolean
  price: Float
  published_at: DateTime
  seedbeds: [ID]
  type: String
  updated_by: ID
  winters: [ID]
}

input editRoleInput {
  created_by: ID
  description: String
  name: String
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input editSeedbedInput {
  created_by: ID
  description: String
  field: ID
  height: Float
  image: ID
  name: String
  number: Int
  plants: [ID]
  published_at: DateTime
  type: String
  updated_by: ID
  width: Float
}

input editToolInput {
  amount: Int
  created_by: ID
  description: String
  image: ID
  name: String
  published_at: DateTime
  type: String
  updated_by: ID
}

input editTractorInput {
  amount: Int
  created_by: ID
  description: String
  horsepowers: Int
  image: ID
  name: String
  published_at: DateTime
  updated_by: ID
}

input editUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String
}

input editWinterInput {
  created_by: ID
  date: DateTime
  description: String
  plants: [ID]
  published_at: DateTime
  updated_by: ID
}

input updateAboutInput {
  data: editAboutInput
}

input updateCancellationInput {
  data: editCancellationInput
  where: InputID
}

input updateFieldInput {
  data: editFieldInput
  where: InputID
}

input updateHelpInput {
  data: editHelpInput
}

input updateHotbedInput {
  data: editHotbedInput
  where: InputID
}

input updatePlantInput {
  data: editPlantInput
  where: InputID
}

input updateRoleInput {
  data: editRoleInput
  where: InputID
}

input updateSeedbedInput {
  data: editSeedbedInput
  where: InputID
}

input updateToolInput {
  data: editToolInput
  where: InputID
}

input updateTractorInput {
  data: editTractorInput
  where: InputID
}

input updateUserInput {
  data: editUserInput
  where: InputID
}

input updateWinterInput {
  data: editWinterInput
  where: InputID
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload
