# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union Morph = About | ComponentAboutAboutItem | ComponentHelpHelpItem | ComponentMapMapItem | Field | FieldAggregator | FieldAggregatorAvg | FieldAggregatorMax | FieldAggregatorMin | FieldAggregatorSum | FieldConnection | FieldConnectionArea | FieldConnectionCreatedAt | FieldConnectionDescription | FieldConnectionField_info | FieldConnectionField_number | FieldConnectionField_type | FieldConnectionId | FieldConnectionImage | FieldConnectionLink | FieldConnectionName | FieldConnectionPublished_at | FieldConnectionUpdatedAt | FieldConnection_id | FieldGroupBy | Help | MapGardenNursery | MapGardenNurseryAggregator | MapGardenNurseryConnection | MapGardenNurseryConnectionCreatedAt | MapGardenNurseryConnectionField_bg | MapGardenNurseryConnectionId | MapGardenNurseryConnectionPublished_at | MapGardenNurseryConnectionShort_description | MapGardenNurseryConnectionUpdatedAt | MapGardenNurseryConnection_id | MapGardenNurseryGroupBy | Plant | PlantAggregator | PlantConnection | PlantConnectionCreatedAt | PlantConnectionDesc | PlantConnectionId | PlantConnectionImg | PlantConnectionName | PlantConnectionPublished_at | PlantConnectionType | PlantConnectionUpdatedAt | PlantConnection_id | PlantGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | Year | YearAggregator | YearAggregatorAvg | YearAggregatorMax | YearAggregatorMin | YearAggregatorSum | YearConnection | YearConnectionCreatedAt | YearConnectionId | YearConnectionPublished_at | YearConnectionUpdatedAt | YearConnectionYear | YearConnection_id | YearGroupBy | createFieldPayload | createMapGardenNurseryPayload | createPlantPayload | createRolePayload | createUserPayload | createYearPayload | deleteAboutPayload | deleteFieldPayload | deleteFilePayload | deleteHelpPayload | deleteMapGardenNurseryPayload | deletePlantPayload | deleteRolePayload | deleteUserPayload | deleteYearPayload | updateAboutPayload | updateFieldPayload | updateHelpPayload | updateMapGardenNurseryPayload | updatePlantPayload | updateRolePayload | updateUserPayload | updateYearPayload

type About {
  About_item: [ComponentAboutAboutItem]
  _id: ID!
  createdAt: DateTime!
  description: String
  id: ID!
  published_at: DateTime
  title: String
  updatedAt: DateTime!
}

type AdminUser {
  firstname: String!
  id: ID!
  lastname: String!
  username: String
}

type ComponentAboutAboutItem {
  _id: ID!
  description: String
  id: ID!
  name: String
}

type ComponentHelpHelpItem {
  _id: ID!
  id: ID!
  link: String
  name: String
}

type ComponentMapMapItem {
  _id: ID!
  color: String
  id: ID!
  link: String
  name: String
}

type Field {
  _id: ID!
  area: Float
  createdAt: DateTime!
  description: String
  field_info: String
  field_number: String
  field_type: String
  id: ID!
  image: UploadFile
  link: String
  name: String
  plants(limit: Int, sort: String, start: Int, where: JSON): [Plant]
  published_at: DateTime
  updatedAt: DateTime!
  years(limit: Int, sort: String, start: Int, where: JSON): [Year]
}

type FieldAggregator {
  avg: FieldAggregatorAvg
  count: Int
  max: FieldAggregatorMax
  min: FieldAggregatorMin
  sum: FieldAggregatorSum
  totalCount: Int
}

type FieldAggregatorAvg {
  area: Float
}

type FieldAggregatorMax {
  area: Float
}

type FieldAggregatorMin {
  area: Float
}

type FieldAggregatorSum {
  area: Float
}

type FieldConnection {
  aggregate: FieldAggregator
  groupBy: FieldGroupBy
  values: [Field]
}

type FieldConnectionArea {
  connection: FieldConnection
  key: Float
}

type FieldConnectionCreatedAt {
  connection: FieldConnection
  key: DateTime
}

type FieldConnectionDescription {
  connection: FieldConnection
  key: String
}

type FieldConnectionField_info {
  connection: FieldConnection
  key: String
}

type FieldConnectionField_number {
  connection: FieldConnection
  key: String
}

type FieldConnectionField_type {
  connection: FieldConnection
  key: String
}

type FieldConnectionId {
  connection: FieldConnection
  key: ID
}

type FieldConnectionImage {
  connection: FieldConnection
  key: ID
}

type FieldConnectionLink {
  connection: FieldConnection
  key: String
}

type FieldConnectionName {
  connection: FieldConnection
  key: String
}

type FieldConnectionPublished_at {
  connection: FieldConnection
  key: DateTime
}

type FieldConnectionUpdatedAt {
  connection: FieldConnection
  key: DateTime
}

type FieldConnection_id {
  connection: FieldConnection
  key: ID
}

type FieldGroupBy {
  _id: [FieldConnection_id]
  area: [FieldConnectionArea]
  createdAt: [FieldConnectionCreatedAt]
  description: [FieldConnectionDescription]
  field_info: [FieldConnectionField_info]
  field_number: [FieldConnectionField_number]
  field_type: [FieldConnectionField_type]
  id: [FieldConnectionId]
  image: [FieldConnectionImage]
  link: [FieldConnectionLink]
  name: [FieldConnectionName]
  published_at: [FieldConnectionPublished_at]
  updatedAt: [FieldConnectionUpdatedAt]
}

type Help {
  _id: ID!
  createdAt: DateTime!
  help_item: [ComponentHelpHelpItem]
  id: ID!
  published_at: DateTime
  title: String
  updatedAt: DateTime!
}

type MapGardenNursery {
  Map_item: [ComponentMapMapItem]
  _id: ID!
  createdAt: DateTime!
  field_bg: UploadFile
  id: ID!
  published_at: DateTime
  short_description: String
  updatedAt: DateTime!
  years(limit: Int, sort: String, start: Int, where: JSON): [Year]
}

type MapGardenNurseryAggregator {
  count: Int
  totalCount: Int
}

type MapGardenNurseryConnection {
  aggregate: MapGardenNurseryAggregator
  groupBy: MapGardenNurseryGroupBy
  values: [MapGardenNursery]
}

type MapGardenNurseryConnectionCreatedAt {
  connection: MapGardenNurseryConnection
  key: DateTime
}

type MapGardenNurseryConnectionField_bg {
  connection: MapGardenNurseryConnection
  key: ID
}

type MapGardenNurseryConnectionId {
  connection: MapGardenNurseryConnection
  key: ID
}

type MapGardenNurseryConnectionPublished_at {
  connection: MapGardenNurseryConnection
  key: DateTime
}

type MapGardenNurseryConnectionShort_description {
  connection: MapGardenNurseryConnection
  key: String
}

type MapGardenNurseryConnectionUpdatedAt {
  connection: MapGardenNurseryConnection
  key: DateTime
}

type MapGardenNurseryConnection_id {
  connection: MapGardenNurseryConnection
  key: ID
}

type MapGardenNurseryGroupBy {
  _id: [MapGardenNurseryConnection_id]
  createdAt: [MapGardenNurseryConnectionCreatedAt]
  field_bg: [MapGardenNurseryConnectionField_bg]
  id: [MapGardenNurseryConnectionId]
  published_at: [MapGardenNurseryConnectionPublished_at]
  short_description: [MapGardenNurseryConnectionShort_description]
  updatedAt: [MapGardenNurseryConnectionUpdatedAt]
}

type Mutation {
  createField(input: createFieldInput): createFieldPayload
  createMapGardenNursery(input: createMapGardenNurseryInput): createMapGardenNurseryPayload
  createPlant(input: createPlantInput): createPlantPayload
  "Create a new role"
  createRole(input: createRoleInput): createRolePayload
  "Create a new user"
  createUser(input: createUserInput): createUserPayload
  createYear(input: createYearInput): createYearPayload
  deleteAbout: deleteAboutPayload
  deleteField(input: deleteFieldInput): deleteFieldPayload
  "Delete one file"
  deleteFile(input: deleteFileInput): deleteFilePayload
  deleteHelp: deleteHelpPayload
  deleteMapGardenNursery(input: deleteMapGardenNurseryInput): deleteMapGardenNurseryPayload
  deletePlant(input: deletePlantInput): deletePlantPayload
  "Delete an existing role"
  deleteRole(input: deleteRoleInput): deleteRolePayload
  "Delete an existing user"
  deleteUser(input: deleteUserInput): deleteUserPayload
  deleteYear(input: deleteYearInput): deleteYearPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateAbout(input: updateAboutInput): updateAboutPayload
  updateField(input: updateFieldInput): updateFieldPayload
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  updateHelp(input: updateHelpInput): updateHelpPayload
  updateMapGardenNursery(input: updateMapGardenNurseryInput): updateMapGardenNurseryPayload
  updatePlant(input: updatePlantInput): updatePlantPayload
  "Update an existing role"
  updateRole(input: updateRoleInput): updateRolePayload
  "Update an existing user"
  updateUser(input: updateUserInput): updateUserPayload
  updateYear(input: updateYearInput): updateYearPayload
  upload(field: String, file: Upload!, ref: String, refId: ID, source: String): UploadFile!
}

type Plant {
  _id: ID!
  createdAt: DateTime!
  desc: String
  fields(limit: Int, sort: String, start: Int, where: JSON): [Field]
  id: ID!
  img: UploadFile
  name: String
  published_at: DateTime
  type: String
  updatedAt: DateTime!
}

type PlantAggregator {
  count: Int
  totalCount: Int
}

type PlantConnection {
  aggregate: PlantAggregator
  groupBy: PlantGroupBy
  values: [Plant]
}

type PlantConnectionCreatedAt {
  connection: PlantConnection
  key: DateTime
}

type PlantConnectionDesc {
  connection: PlantConnection
  key: String
}

type PlantConnectionId {
  connection: PlantConnection
  key: ID
}

type PlantConnectionImg {
  connection: PlantConnection
  key: ID
}

type PlantConnectionName {
  connection: PlantConnection
  key: String
}

type PlantConnectionPublished_at {
  connection: PlantConnection
  key: DateTime
}

type PlantConnectionType {
  connection: PlantConnection
  key: String
}

type PlantConnectionUpdatedAt {
  connection: PlantConnection
  key: DateTime
}

type PlantConnection_id {
  connection: PlantConnection
  key: ID
}

type PlantGroupBy {
  _id: [PlantConnection_id]
  createdAt: [PlantConnectionCreatedAt]
  desc: [PlantConnectionDesc]
  id: [PlantConnectionId]
  img: [PlantConnectionImg]
  name: [PlantConnectionName]
  published_at: [PlantConnectionPublished_at]
  type: [PlantConnectionType]
  updatedAt: [PlantConnectionUpdatedAt]
}

type Query {
  about(publicationState: PublicationState): About
  field(id: ID!, publicationState: PublicationState): Field
  fields(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Field]
  fieldsConnection(limit: Int, sort: String, start: Int, where: JSON): FieldConnection
  files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
  filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
  help(publicationState: PublicationState): Help
  mapGardenNurseries(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [MapGardenNursery]
  mapGardenNurseriesConnection(limit: Int, sort: String, start: Int, where: JSON): MapGardenNurseryConnection
  mapGardenNursery(id: ID!, publicationState: PublicationState): MapGardenNursery
  me: UsersPermissionsMe
  plant(id: ID!, publicationState: PublicationState): Plant
  plants(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Plant]
  plantsConnection(limit: Int, sort: String, start: Int, where: JSON): PlantConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  "Retrieve all the existing roles. You can't apply filters on this query."
  roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
  year(id: ID!, publicationState: PublicationState): Year
  years(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Year]
  yearsConnection(limit: Int, sort: String, start: Int, where: JSON): YearConnection
}

type UploadFile {
  _id: ID!
  alternativeText: String
  caption: String
  createdAt: DateTime!
  ext: String
  formats: JSON
  hash: String!
  height: Int
  id: ID!
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
  size: Float!
  updatedAt: DateTime!
  url: String!
  width: Int
}

type UploadFileAggregator {
  avg: UploadFileAggregatorAvg
  count: Int
  max: UploadFileAggregatorMax
  min: UploadFileAggregatorMin
  sum: UploadFileAggregatorSum
  totalCount: Int
}

type UploadFileAggregatorAvg {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMax {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMin {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorSum {
  height: Float
  size: Float
  width: Float
}

type UploadFileConnection {
  aggregate: UploadFileAggregator
  groupBy: UploadFileGroupBy
  values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCaption {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCreatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionExt {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionFormats {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionHash {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionHeight {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnectionId {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionMime {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionName {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionPreviewUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider_metadata {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionSize {
  connection: UploadFileConnection
  key: Float
}

type UploadFileConnectionUpdatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionWidth {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnection_id {
  connection: UploadFileConnection
  key: ID
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  createdAt: [UploadFileConnectionCreatedAt]
  ext: [UploadFileConnectionExt]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  height: [UploadFileConnectionHeight]
  id: [UploadFileConnectionId]
  mime: [UploadFileConnectionMime]
  name: [UploadFileConnectionName]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  size: [UploadFileConnectionSize]
  updatedAt: [UploadFileConnectionUpdatedAt]
  url: [UploadFileConnectionUrl]
  width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String!
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  action: String!
  controller: String!
  enabled: Boolean!
  id: ID!
  policy: String
  role: UsersPermissionsRole
  type: String!
}

type UsersPermissionsRole {
  _id: ID!
  description: String
  id: ID!
  name: String!
  permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
  type: String
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  aggregate: UsersPermissionsRoleAggregator
  groupBy: UsersPermissionsRoleGroupBy
  values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionId {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnectionName {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionType {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnection_id {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  description: [UsersPermissionsRoleConnectionDescription]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime!
  email: String!
  id: ID!
  provider: String
  role: UsersPermissionsRole
  updatedAt: DateTime!
  username: String!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  aggregate: UsersPermissionsUserAggregator
  groupBy: UsersPermissionsUserGroupBy
  values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionEmail {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionId {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionProvider {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionRole {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionUsername {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnection_id {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  blocked: [UsersPermissionsUserConnectionBlocked]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  email: [UsersPermissionsUserConnectionEmail]
  id: [UsersPermissionsUserConnectionId]
  provider: [UsersPermissionsUserConnectionProvider]
  role: [UsersPermissionsUserConnectionRole]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
}

type Year {
  Year: Int
  _id: ID!
  createdAt: DateTime!
  fields(limit: Int, sort: String, start: Int, where: JSON): [Field]
  id: ID!
  map_garden_nurseries(limit: Int, sort: String, start: Int, where: JSON): [MapGardenNursery]
  published_at: DateTime
  updatedAt: DateTime!
}

type YearAggregator {
  avg: YearAggregatorAvg
  count: Int
  max: YearAggregatorMax
  min: YearAggregatorMin
  sum: YearAggregatorSum
  totalCount: Int
}

type YearAggregatorAvg {
  Year: Float
}

type YearAggregatorMax {
  Year: Float
}

type YearAggregatorMin {
  Year: Float
}

type YearAggregatorSum {
  Year: Float
}

type YearConnection {
  aggregate: YearAggregator
  groupBy: YearGroupBy
  values: [Year]
}

type YearConnectionCreatedAt {
  connection: YearConnection
  key: DateTime
}

type YearConnectionId {
  connection: YearConnection
  key: ID
}

type YearConnectionPublished_at {
  connection: YearConnection
  key: DateTime
}

type YearConnectionUpdatedAt {
  connection: YearConnection
  key: DateTime
}

type YearConnectionYear {
  connection: YearConnection
  key: Int
}

type YearConnection_id {
  connection: YearConnection
  key: ID
}

type YearGroupBy {
  Year: [YearConnectionYear]
  _id: [YearConnection_id]
  createdAt: [YearConnectionCreatedAt]
  id: [YearConnectionId]
  published_at: [YearConnectionPublished_at]
  updatedAt: [YearConnectionUpdatedAt]
}

type createFieldPayload {
  field: Field
}

type createMapGardenNurseryPayload {
  mapGardenNursery: MapGardenNursery
}

type createPlantPayload {
  plant: Plant
}

type createRolePayload {
  role: UsersPermissionsRole
}

type createUserPayload {
  user: UsersPermissionsUser
}

type createYearPayload {
  year: Year
}

type deleteAboutPayload {
  about: About
}

type deleteFieldPayload {
  field: Field
}

type deleteFilePayload {
  file: UploadFile
}

type deleteHelpPayload {
  help: Help
}

type deleteMapGardenNurseryPayload {
  mapGardenNursery: MapGardenNursery
}

type deletePlantPayload {
  plant: Plant
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type deleteYearPayload {
  year: Year
}

type updateAboutPayload {
  about: About
}

type updateFieldPayload {
  field: Field
}

type updateHelpPayload {
  help: Help
}

type updateMapGardenNurseryPayload {
  mapGardenNursery: MapGardenNursery
}

type updatePlantPayload {
  plant: Plant
}

type updateRolePayload {
  role: UsersPermissionsRole
}

type updateUserPayload {
  user: UsersPermissionsUser
}

type updateYearPayload {
  year: Year
}

enum PublicationState {
  LIVE
  PREVIEW
}

input AboutInput {
  About_item: [ComponentAboutAboutItemInput]
  created_by: ID
  description: String
  published_at: DateTime
  title: String
  updated_by: ID
}

input ComponentAboutAboutItemInput {
  description: String
  name: String
}

input ComponentHelpHelpItemInput {
  link: String
  name: String
}

input ComponentMapMapItemInput {
  color: String
  link: String
  name: String
}

input FieldInput {
  area: Float
  created_by: ID
  description: String
  field_info: String
  field_number: String
  field_type: String
  image: ID
  link: String
  name: String
  plants: [ID]
  published_at: DateTime
  updated_by: ID
  years: [ID]
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  size: Float!
  updated_by: ID
  url: String!
  width: Int
}

input HelpInput {
  created_by: ID
  help_item: [ComponentHelpHelpItemInput]
  published_at: DateTime
  title: String
  updated_by: ID
}

input InputID {
  id: ID!
}

input MapGardenNurseryInput {
  Map_item: [ComponentMapMapItemInput]
  created_by: ID
  field_bg: ID
  published_at: DateTime
  short_description: String
  updated_by: ID
  years: [ID]
}

input PlantInput {
  created_by: ID
  desc: String
  fields: [ID]
  img: ID
  name: String
  published_at: DateTime
  type: String
  updated_by: ID
}

input RoleInput {
  created_by: ID
  description: String
  name: String!
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input UserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String!
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

input YearInput {
  Year: Int
  created_by: ID
  fields: [ID]
  map_garden_nurseries: [ID]
  published_at: DateTime
  updated_by: ID
}

input createFieldInput {
  data: FieldInput
}

input createMapGardenNurseryInput {
  data: MapGardenNurseryInput
}

input createPlantInput {
  data: PlantInput
}

input createRoleInput {
  data: RoleInput
}

input createUserInput {
  data: UserInput
}

input createYearInput {
  data: YearInput
}

input deleteFieldInput {
  where: InputID
}

input deleteFileInput {
  where: InputID
}

input deleteMapGardenNurseryInput {
  where: InputID
}

input deletePlantInput {
  where: InputID
}

input deleteRoleInput {
  where: InputID
}

input deleteUserInput {
  where: InputID
}

input deleteYearInput {
  where: InputID
}

input editAboutInput {
  About_item: [editComponentAboutAboutItemInput]
  created_by: ID
  description: String
  published_at: DateTime
  title: String
  updated_by: ID
}

input editComponentAboutAboutItemInput {
  description: String
  id: ID
  name: String
}

input editComponentHelpHelpItemInput {
  id: ID
  link: String
  name: String
}

input editComponentMapMapItemInput {
  color: String
  id: ID
  link: String
  name: String
}

input editFieldInput {
  area: Float
  created_by: ID
  description: String
  field_info: String
  field_number: String
  field_type: String
  image: ID
  link: String
  name: String
  plants: [ID]
  published_at: DateTime
  updated_by: ID
  years: [ID]
}

input editFileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  size: Float
  updated_by: ID
  url: String
  width: Int
}

input editHelpInput {
  created_by: ID
  help_item: [editComponentHelpHelpItemInput]
  published_at: DateTime
  title: String
  updated_by: ID
}

input editMapGardenNurseryInput {
  Map_item: [editComponentMapMapItemInput]
  created_by: ID
  field_bg: ID
  published_at: DateTime
  short_description: String
  updated_by: ID
  years: [ID]
}

input editPlantInput {
  created_by: ID
  desc: String
  fields: [ID]
  img: ID
  name: String
  published_at: DateTime
  type: String
  updated_by: ID
}

input editRoleInput {
  created_by: ID
  description: String
  name: String
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input editUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String
}

input editYearInput {
  Year: Int
  created_by: ID
  fields: [ID]
  map_garden_nurseries: [ID]
  published_at: DateTime
  updated_by: ID
}

input updateAboutInput {
  data: editAboutInput
}

input updateFieldInput {
  data: editFieldInput
  where: InputID
}

input updateHelpInput {
  data: editHelpInput
}

input updateMapGardenNurseryInput {
  data: editMapGardenNurseryInput
  where: InputID
}

input updatePlantInput {
  data: editPlantInput
  where: InputID
}

input updateRoleInput {
  data: editRoleInput
  where: InputID
}

input updateUserInput {
  data: editUserInput
  where: InputID
}

input updateYearInput {
  data: editYearInput
  where: InputID
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload
